{"version":3,"file":"static/js/387.11fa15d9.chunk.js","mappings":"uSAEaA,EAAOC,EAAAA,GAAAA,EAAH,sCAGJC,EAAOD,EAAAA,GAAAA,GAAH,gD,SCyDjB,MAvDA,WACE,OAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAyBJ,EAAAA,EAAAA,UAAS,IAAlC,eAAOK,EAAP,KAAcC,EAAd,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAmBR,OAjBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,6FACEP,GAAa,GACbE,EAAS,MAFX,mBAI2BM,EAAAA,EAAAA,IAAaH,GAJxC,gBAIYI,EAJZ,EAIYA,KACRL,EAAQK,GALZ,kDAOuB,iBAAf,KAAMC,MACRR,EAAS,2BARf,yBAWIF,GAAa,GAXjB,8EADc,uBAAC,WAAD,wBAedW,EACD,GAAE,CAACN,KAEF,gCACGN,GACC,SAACa,EAAA,EAAD,UAAS,aAET,8BACA,wBACGT,EAAMU,OAAS,EACdV,EAAMW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC1BC,EAAWD,EAAY,wCACQA,GACjCE,EACJ,OACE,UAACvB,EAAD,YACE,gBAAKwB,IAAKF,EAAUG,IAAKN,EAAMO,MAAM,QACrC,SAAC5B,EAAD,WAAM,uBAAIqB,OACV,UAACrB,EAAD,YAAM,uBAAG,eAAc,IAAEsB,OAHhBF,EAMd,KAED,SAACH,EAAA,EAAD,UAAS,yCAMdX,IAAS,SAACW,EAAA,EAAD,UAAUX,MAGzB,C,yLC1DKuB,E,QAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BACTC,OAAQ,CACNC,QAAS,sCAIAC,EAAW,mCAAG,oGACFL,EAASM,IAAT,uBADE,cACnBC,EADmB,OAEzBC,QAAQC,IAAIF,EAASG,MAFI,kBAGlBH,EAASG,MAHS,2CAAH,qDAMXC,EAAU,mCAAG,WAAMpB,GAAN,uFACDS,EAASM,IAAT,iBAAuBf,IADtB,cAClBgB,EADkB,OAExBC,QAAQC,IAAIF,EAASG,MAFG,kBAGjBH,EAASG,MAHQ,2CAAH,sDAMVE,EAAc,mCAAG,gGAASC,EAAT,EAASA,OAAQC,EAAjB,EAAiBA,UAAjB,SACLd,EAASM,IAAT,8BAAoCO,GAAU,CACnEE,OAAQD,EAAUC,SAFQ,cACtBR,EADsB,OAI5BC,QAAQC,IAAIF,EAASG,MAJO,kBAKrBH,EAASG,MALY,2CAAH,sDAQd1B,EAAY,mCAAG,WAAMO,GAAN,uFACHS,EAASM,IAAT,iBAAuBf,EAAvB,aADG,cACpBgB,EADoB,OAE1BC,QAAQC,IAAIF,EAASG,MAFK,kBAGnBH,EAASG,MAHU,2CAAH,sDAMZM,EAAW,mCAAG,WAAMzB,GAAN,uFACFS,EAASM,IAAT,iBAAuBf,EAAvB,aADE,cACnBgB,EADmB,OAEzBC,QAAQC,IAAIF,EAASG,MAFI,kBAGlBH,EAASG,MAHS,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/movies-api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Desc = styled.p`\n  margin: 5;\n`;\nexport const Item = styled.li`\n  margin-bottom: 12px;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieCast } from '../../services/movies-api';\nimport Message from 'components/Message/Message';\nimport imgMovie from 'components/img-movie/img-movie.png';\nimport { Desc, Item } from './Cast.styled';\n\nfunction Cast() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [casts, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function loadMovieCast() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const { cast } = await getMovieCast(movieId);\n        setCast(cast);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError('Try reloading the page!');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    loadMovieCast();\n  }, [movieId]);\n  return (\n    <>\n      {isLoading ? (\n        <Message>Loading</Message>\n      ) : (\n        <section>\n        <ul>\n          {casts.length > 0 ? (\n            casts.map(({ id, name, character, profile_path }) => {\n              const imageUrl = profile_path\n                ? `https://image.tmdb.org/t/p/w92${profile_path}`\n                : imgMovie;\n              return (\n                <Item key={id}>\n                  <img src={imageUrl} alt={name} width=\"92\" />\n                  <Desc><b>{name}</b></Desc>\n                  <Desc><b>Character:</b> {character}</Desc>\n                </Item>\n              );\n            })\n          ) : (\n            <Message>Not information about the movie!</Message>\n          )}\n        </ul>\n        </section>\n      )}\n      \n      {error && <Message>{error}</Message>}\n    </>\n  );\n}\n\nexport default Cast;","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n  params: {\n    api_key: '7b381c0941b126eabbbca88209330c37',\n  },\n});\n\nexport const getAllMovie = async () => {\n  const response = await instance.get(`trending/movie/day?`);\n  console.log(response.data);\n  return response.data;\n};\n\nexport const getDetails = async id => {\n  const response = await instance.get(`/movie/${id}`);\n  console.log(response.data);\n  return response.data;\n};\n\nexport const getSearchMovie = async ({ search, abortCtrl }) => {\n  const response = await instance.get(`/search/movie?query=${search}`, {\n    signal: abortCtrl.signal,\n  });\n  console.log(response.data);\n  return response.data;\n};\n\nexport const getMovieCast = async id => {\n  const response = await instance.get(`/movie/${id}/credits`);\n  console.log(response.data);\n  return response.data;\n};\n\nexport const getRevMovie = async id => {\n  const response = await instance.get(`/movie/${id}/reviews`);\n  console.log(response.data);\n  return response.data;\n};  "],"names":["Desc","styled","Item","useState","isLoading","setIsLoading","error","setError","casts","setCast","movieId","useParams","useEffect","getMovieCast","cast","code","loadMovieCast","Message","length","map","id","name","character","profile_path","imageUrl","imgMovie","src","alt","width","instance","axios","baseURL","params","api_key","getAllMovie","get","response","console","log","data","getDetails","getSearchMovie","search","abortCtrl","signal","getRevMovie"],"sourceRoot":""}