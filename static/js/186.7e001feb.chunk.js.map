{"version":3,"file":"static/js/186.7e001feb.chunk.js","mappings":"wOAiDA,UA5CA,WACE,OAAkCA,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAA8BJ,EAAAA,EAAAA,UAAS,IAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAoBR,OAlBAE,EAAAA,EAAAA,YAAU,WAAM,wCACd,6FACEP,GAAa,GACbE,EAAS,MAFX,mBAI8BM,EAAAA,EAAAA,IAAYH,GAJ1C,gBAIYI,EAJZ,EAIYA,QACRL,EAAWK,GALf,kDAOuB,iBAAf,KAAMC,MACRR,EAAS,kBARf,yBAWIF,GAAa,GAXjB,8EADc,uBAAC,WAAD,wBAedW,EACD,GAAE,CAACN,KAGF,+BACGN,GACC,SAAC,IAAD,UAAS,aACT,wBACGI,EAAQS,OAAS,EAChBT,EAAQU,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACV,2BACE,0BAAG,uBAAG,YAAW,IAAED,MACnB,uBAAIC,MAFGF,EADC,KAMR,SAAC,IAAD,UAAS,iCAGlBb,IAAS,SAAC,IAAD,UAAUA,MAGzB,C,mMC7CDgB,EAAAA,EAAAA,SAAAA,QAAyB,gCAEzB,IAAMC,EAAM,mCAKCC,EAAW,mCAAG,WAAMC,GAAN,kFACnBC,EADmB,mCACuBH,EADvB,4DAC8EE,GAD9E,SAEFH,EAAAA,EAAAA,IAAUI,GAFR,uBAEjBC,EAFiB,EAEjBA,KAFiB,kBAGlBA,GAHkB,2CAAH,sDAKXC,EAAU,mCAAG,WAAMlB,GAAN,kFAClBgB,EADkB,gBACKhB,EADL,qBACyBa,EADzB,4BAEMD,EAAAA,EAAAA,IAAUI,GAFhB,uBAEVG,EAFU,EAEhBF,KAFgB,kBAGjBE,GAHiB,2CAAH,sDAKVC,EAAc,mCAAG,WAAML,GAAN,kFACtBC,EADsB,+BACgBH,EADhB,4DACuEE,GADvE,SAEGH,EAAAA,EAAAA,IAAUI,GAFb,uBAEdK,EAFc,EAEpBJ,KAFoB,kBAGrBI,GAHqB,2CAAH,sDAMdC,EAAY,mCAAG,WAAMtB,GAAN,kFACpBgB,EADoB,gBACGhB,EADH,sDAEHY,EAAAA,EAAAA,IAAUI,GAFP,uBAElBC,EAFkB,EAElBA,KAFkB,kBAGnBA,GAHmB,2CAAH,sDAWZd,EAAW,mCAAG,WAAMH,GAAN,kFACnBgB,EADmB,gBACIhB,EADJ,sDAEFY,EAAAA,EAAAA,IAAUI,GAFR,uBAEjBC,EAFiB,EAEjBA,KAFiB,kBAGlBA,GAHkB,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","services/movies-api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getRevMovie } from '../../services/movies-api';\nimport Message from 'components/Message/Message';\n\nfunction Reviews() {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    async function getReviews() {\n      setIsLoading(true);\n      setError(null);\n      try {\n        const { results } = await getRevMovie(movieId);\n        setReviews(results);\n      } catch (error) {\n        if (error.code !== 'ERR_CANCELED') {\n          setError('Try reloading!');\n        }\n      } finally {\n        setIsLoading(false);\n      }\n    }\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <section>\n      {isLoading ? (\n        <Message>Loading</Message>) : (\n        <ul>\n          {reviews.length > 0 ? (\n            reviews.map(({ id, author, content }) => (\n              <li key={id}>\n                <p><b>Author:</b> {author}</p>\n                <p>{content}</p>\n              </li>\n            ))\n          ) : ( <Message>We don't have any reviews!</Message>)}\n        </ul>\n      )}\n      {error && <Message>{error}</Message>}\n    </section>\n  );\n}\n\nexport default Reviews;","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\n\nconst KEY = '7b381c0941b126eabbbca88209330c37';\nexport const IMAGE_URL = 'https://image.tmdb.org/t/p/w500';\n\n// axios.defaults.headers.common['Authorization'] =\n//   '7b381c0941b126eabbbca88209330c37';\nexport const getAllMovie = async stringToSearch => {\n  const queryString = `trending/all/day?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\nexport const getDetails = async movieId => {\n  const queryString = `movie/${movieId}$?api_key=${KEY}&language=en-US`;\n  const { data: movie } = await axios.get(queryString);\n  return movie;\n};\nexport const getSearchMovie = async stringToSearch => {\n  const queryString = `search/movie?api_key=${KEY}&language=en-US&page=1&include_adult=false&query=${stringToSearch}`;\n  const { data: movies } = await axios.get(queryString);\n  return movies;\n};\n\nexport const getMovieCast = async movieId => {\n  const queryString = `movie/${movieId}/credits$?api_key={apiKey}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n\n\n\n\n\nexport const getRevMovie = async movieId => {\n  const queryString = `movie/${movieId}/reviews$?api_key={apiKey}&language=en-US`;\n  const { data } = await axios.get(queryString);\n  return data;\n};\n\n\n\n\n\n"],"names":["useState","isLoading","setIsLoading","error","setError","reviews","setReviews","movieId","useParams","useEffect","getRevMovie","results","code","getReviews","length","map","id","author","content","axios","KEY","getAllMovie","stringToSearch","queryString","data","getDetails","movie","getSearchMovie","movies","getMovieCast"],"sourceRoot":""}